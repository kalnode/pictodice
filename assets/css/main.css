@tailwind base;
@tailwind components;
@tailwind utilities;


/* ------------------------------ */
/* SAFE AREA */
/* ------------------------------ */

/* This passes safe-area-inset values into CSS vars on HTML, so that we can more conveniently access the values inside the app */
@supports (padding-top: env(safe-area-inset-top)) {
    html {
        --safe-area-inset-top: env(safe-area-inset-top);
        --safe-area-inset-right: env(safe-area-inset-right);
        --safe-area-inset-bottom: env(safe-area-inset-bottom);
        --safe-area-inset-left: env(safe-area-inset-left);
    }
}

/* ------------------------------ */
/* CONTAINMENT */
/* ------------------------------ */
html,body, #__nuxt, #__layout{
    width: 100% !important;
    height: 100% !important;
}

body {
    overflow: hidden;
    width: 100%;
    height: 100%;
    position: fixed;
    background-color: var(--bg);
    color: var(--color);
    transition: background-color 0.3s;
}







/* ------------------------------ */
/* COLORS */
/* ------------------------------ */

:root {
    --color: rgb(14, 67, 88);
    --color-primary: #156888;
    --color-secondary: rgb(14, 67, 88);
    --color-tertiary: rgb(206, 110, 21);
    --color-panel: #ffffff; /* Subtle contrast background for sections/cards/etc */
    --bg: #f7fafc;
    --bg-secondary: #fff;
    --border-color: #ddd;

    --color-A: #dddddd;
    --color-B: #333333;
}

/*
ORIGINAL LIGHT TEAL
:root {
    --color: #243746;
    --color-primary: #158876;
    --color-secondary: #0e2233;
    --color-panel: #076c1717;
    --bg: #f3f5f4;
    --bg-secondary: #fff;
    --border-color: #ddd;
}
*/

.ColorMode-dark {
    --color: #ebf4f1;
    --color-primary: #41b38a;
    --color-secondary: #fdf9f3;
    --color-tertiary: rgb(206, 110, 21);
    --color-panel: #ffffff12;
    --bg: #091a28;
    --bg-secondary: #071521;
    --border-color: #0d2538;
}

.ColorMode-sepia {
    --color: #433422;
    --color-primary: #433422;
    --color-secondary: #504231;
    --color-tertiary: rgb(173, 133, 96);
    --color-panel: #00000012;
    --bg: #f1e7d0;
    --bg-secondary: #eae0c9;
    --border-color: #ded0bf;
}





/* ------------------------------ */
/* LAYOUT */
/* ------------------------------ */
.app-width-max {
    @apply max-w-5xl;
}

.app-padding-x {
    @apply px-8;
}

.app-margin-x-neg {
    @apply -mx-4;
}

.card {

    /* FYI: Ideally we use drop-shadow-lg because it looks nicer, however it seems to create problems with blurry text
    in child elements, when the element has translateZ (due to animation like @vueuse's motion) and/or a child has a transform effect
    (like hover: scale modifier).
    INSTEAD: using shadow-lg seems to not have these issues
    */
    @apply bg-[color:var(--color-panel)] shadow-xl rounded-lg border border-[color:var(--color-A)] border-opacity-20;
    /* background: linear-gradient(190deg, rgba(0,0,0,0.08727240896358546) 72%, rgba(0,0,0,0.15449929971988796) 100%); */
}

.card_padding {
    @apply p-4 xs:p-6 md:p-10;
}

.dice_preview {
    /* @apply max-w-xs; */
    /* drop-shadow-2xl */
    max-width: 12rem;
    filter: drop-shadow(0 10px 25px rgb(159 159 159 / 34%));
}

@media screen and (min-width: 768px) {
    .column_height {
        /* TODO: 16em is arbitrary, however, instead we may want this to match sticky-footer height. Can we feed in a dynamic var here? */
        min-height:calc(100vh - 16em)
    }
}




/* ------------------------------ */
/* LINKS, BUTTONS */
/* ------------------------------ */
a {
    color: var(--color-primary);
    transition: opacity 0.3s;
}

a:not(.noHoverOpacity):hover {
    @apply opacity-80;
}

.btnapp {
    @apply ring-offset-4 focus:outline-none focus:ring-4 ring-[color:var(--color-tertiary)] inline-block rounded-full p-3 m-1 cursor-pointer text-[color:var(--bg-secondary)] bg-[color:var(--color-primary)] hover:opacity-80;
}

.btn_small {
    @apply p-2 px-6 text-sm xs:text-base md:text-lg;
}

.btn_large {
    @apply p-4 px-8 text-sm xs:text-base md:text-xl;
}



/* ------------------------------ */
/* TITLES, TEXT */
/* ------------------------------ */

h1 {
    @apply text-xl;
}

h2 {
    @apply text-lg;
}

.textInGroupTransitionFix {
    /* Potential tricks that attempt to control blurryness or jitter in animated text */
    /* No silver bullet yet */
    /*
    backface-visibility: hidden;
    transform: perspective(1px) translateZ(0);
    -webkit-font-smoothing: subpixel-antialiased;
    zoom: 99.6%;
    */
}


/* ------------------------------ */
/* TRANSITIONS */
/* ------------------------------ */

/* NUXT PAGE TRANSITIONS */
.page-enter-active,
.page-leave-active {
    transition: filter 0.4s, opacity 0.4s;
     /* transition: all 33s;*/
}
.page-enter-from,
.page-leave-to {
    opacity: 0;
    filter: blur(1rem);
}


/* VUE NAMED-TRANSITIONS */
.fade-enter-active,
.fade-leave-active {
    transition: opacity 0.2s ease;
}

.fade-enter-from,
.fade-leave-to {
    opacity: 0;
}




/* ------------------------------ */
/* MISC */
/* ------------------------------ */


/* Removes ability to select element. E.g. On desktop, drag-hilight content, and observe noselect elements are not selectable */
.noSelect {
    -webkit-touch-callout: none; /* iOS Safari */
    -webkit-user-select: none; /* Safari */
    -khtml-user-select: none; /* Konqueror HTML */
    -moz-user-select: none; /* Old versions of Firefox */
    -ms-user-select: none; /* Internet Explorer/Edge */
    user-select: none; /* Non-prefixed version, currently supported by Chrome, Edge, Opera and Firefox */
}

/* In some browsers/devices, removes the 'blue flash' hilight when user taps/clicks an element */
/* Not widely compatible. Seems to be effective in Android Chrome though, where the 'blue flash' is very noticeable. iPhone Safari doesn't have 'blue flash' to start with. */
.noHighlight {
    -webkit-tap-highlight-color: transparent;
}
